<?xml version="1.0" encoding="UTF-8"?><pm:Assertion xmlns:pm="http://systinet.com/2005/10/soa/policy" xmlns:g="http://systinet.com/2005/05/soa/model/propertyGroup" xmlns:r="http://systinet.com/2005/05/repository" xmlns:p="http://systinet.com/2005/05/soa/model/property" xmlns:a="http://systinet.com/2005/05/soa/model/artifact" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:pt="http://systinet.com/2005/05/soa/model/property/type" xmlns:rest="http://systinet.com/2005/05/soa/resource" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><pm:Template><p0:MultiInheritanceIsNotAllowed xmlns:p0="urn:localhost:com:enter-your-organization-or-project-specific-namespace"/></pm:Template><pm:Validation SourceType="xmlns(ns=http://systinet.com/2005/05/soa/resource)qname(ns:resource)"><JavaScriptValidator xmlns="http://systinet.com/2005/10/soa/policy/validation" xmlns:xlink="http://www.w3.org/1999/xlink/">/**
 * This function is called iteratively by the java script validator,
 * There are some java script objects pre-initialized in the scripting context (e.g. repositoryService ...)  
 * You can find others and configure more in the managed script environment.js
 *
 * @param  resource
 *         an external resource or an artifact
 *
 * @param  params
 *         a map of params
 */
function validate(resource, params) {
	var artifact = resource;
	
	// to check if given artifact matches applicable artifact type at first.
	var artifactTypes = params.get("applicableTo");	
	if (artifactTypes != null) {
		var matchedArtifactType = false;
	    var artifactTypesList = artifactTypes.split(",");
		for (var row=0; row&lt;artifactTypesList.length; row++) {
			if (artifact.get_artifactSdmName() == artifactTypesList[row]) {
				matchedArtifactType=true;
				break;
			}
		}
		if (!matchedArtifactType) {
		    return new JsValidationResult(JsValidationCode.NOT_APPLICABLE);
		}
	}
	
	if (!artifact.isPropertyInitialized("specializes")) {
		repositoryService.fetchArtifactProperties(artifact, new ArtifactPartSelector("specializes"));
	}
	
	var listRelations = artifact.getMultiRelationProperty("specializes");
	var countRelatedObject = 0;
	for (var row=0; row&lt;listRelations.size(); row++) {
		var targetSdmName = listRelations.get(row).getTargetSdmName();
		if (targetSdmName == artifact.get_artifactSdmName()) {
			countRelatedObject++;
		}		
	}
	if (countRelatedObject &lt;= 1) {
		return new JsValidationResult(JsValidationCode.OK);
	} else {
		return new JsValidationResult(JsValidationCode.FAILED, "This " + artifact.get_artifactSdmName() + " has 'specializes' relationship to more than 1 " +artifact.get_artifactSdmName() + ".");
	}    
}
</JavaScriptValidator></pm:Validation></pm:Assertion>