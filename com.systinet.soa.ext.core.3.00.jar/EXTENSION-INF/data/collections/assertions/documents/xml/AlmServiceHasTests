<?xml version="1.0" encoding="UTF-8"?>
<pm:Assertion xmlns:pm="http://systinet.com/2005/10/soa/policy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <pm:Template>
        <alm:AlmServiceHasTests xmlns:alm="http://hp.com/2012/11/alm"/>
    </pm:Template>
    <pm:Bundle>
        <pm:String Key="no-alm-server-defined">No ALM Server is defined</pm:String>
        <pm:String Key="service-not-registered">Service is not registered in ALM</pm:String>
        <pm:String Key="service-has-no-tests">Service has no tests defined in ALM</pm:String>
    </pm:Bundle>
    <pm:Validation SourceType="xmlns(ns=http://systinet.com/2005/05/soa/model/artifact)qname(ns:webServiceArtifact)">
        <XQuery xmlns="http://systinet.com/2005/10/soa/policy/validation">

(: ----------------------------------------------------------------- :)
(: Policy to check whether a service has any tests defined in ALM    :)
(: ----------------------------------------------------------------- :)

declare namespace val="http://systinet.com/2005/10/soa/policy/validation";
declare namespace pm="http://systinet.com/2005/10/soa/policy/report";
declare namespace rest="http://systinet.com/2005/05/soa/resource";
declare namespace a="http://systinet.com/2005/05/soa/model/artifact";
declare namespace p="http://systinet.com/2005/05/soa/model/property";
declare namespace g="http://systinet.com/2005/05/soa/model/propertyGroup";
declare namespace alm="http://hp.com/2012/11/alm";
declare namespace atom="http://www.w3.org/2005/Atom";


if (empty(/rest:resource/rest:descriptor/a:webServiceArtifact)) then
    val:assertionNotApplicable()    
else
    let $almServers := alm:getAlmServerList()
    return
        if (empty($almServers/alm:server)) then
            val:assertionFailed(val:l10n('no-alm-server-defined'))
        else
            let $uuid := string(/rest:resource/rest:metadata/rest:uuid)
            let $hasService :=
                for $almServer in $almServers/alm:server
				let $almServices := alm:getAlmBeans($almServer, 'almService',$uuid)
				where (not(empty($almServices/alm:bean)))
                return
                    true()
			
            return
                if (empty($hasService)) then
                    val:assertionFailed(val:l10n('service-not-registered'))
                else
                    (
					let $hasTest :=
					for $almServer in $almServers/alm:server
						let $tests := alm:getAlmBeans($almServer, 'almTest',$uuid)
						where (not(empty($tests/alm:bean)))
						return
							true()
					return
					if (empty($hasTest)) then
						val:assertionFailed(val:l10n('service-has-no-tests'))
					else
						val:assertionOK()
					)

        </XQuery>
    </pm:Validation>
</pm:Assertion>
